{"version":3,"sources":["component/Cita.js","component/Formulario.js","App.js","reportWebVitals.js","index.js"],"names":["Cita","cita","eliminarCita","mascota","propietario","fecha","hora","sintomas","className","onClick","id","Formulario","mostrarCita","initialState","useState","setCita","error","setError","handleInputChange","e","target","name","value","action","onSubmit","preventDefault","trim","uuidv4","htmlFor","type","placeholder","onChange","cols","rows","App","JSON","parse","localStorage","getItem","citas","setCitas","useEffect","setItem","stringify","nuevasCitas","filter","tituloH2","length","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bcba25e5.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const Cita = ({ cita, eliminarCita }) => {\n  const { mascota, propietario, fecha, hora, sintomas } = cita;\n\n  return (\n    <div className=\"cita\">\n      <p>\n        mascota: <span>{mascota}</span>\n      </p>\n      <p>\n        propietario: <span>{propietario}</span>\n      </p>\n      <p>\n        fecha: <span>{fecha}</span>\n      </p>\n      <p>\n        hora: <span>{hora}</span>\n      </p>\n      <p>\n        sintomas: <span>{sintomas}</span>\n      </p>\n\n      <button\n        className=\"button eliminar u-full-width\"\n        onClick={() => eliminarCita(cita.id)}\n      >\n        Eliminar &times;\n      </button>\n    </div>\n  );\n};\n\nCita.propTypes = {\n  cita: PropTypes.object.isRequired,\n  eliminarCita: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport PropTypes from 'prop-types';\n\nexport const Formulario = ({ mostrarCita }) => {\n  const initialState = {\n    mascota: '',\n    propietario: '',\n    fecha: '',\n    hora: '',\n    sintomas: '',\n  };\n\n  const [cita, setCita] = useState(initialState);\n\n  const [error, setError] = useState(false);\n\n  const handleInputChange = (e) => {\n    setCita({\n      ...cita,\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    // validar formulario, agregar id, guardar la cita y limpiar formulario\n    if (\n      mascota.trim() === '' ||\n      propietario.trim() === '' ||\n      fecha.trim() === '' ||\n      hora.trim() === '' ||\n      sintomas.trim() === ''\n    ) {\n      setError(true);\n      return;\n    }\n\n    setError(false);\n\n    cita.id = uuidv4();\n\n    mostrarCita(cita);\n\n    setCita(initialState);\n  };\n\n  const { mascota, propietario, fecha, hora, sintomas } = cita;\n\n  return (\n    <>\n      <h2>Agendar Cita</h2>\n\n      {error && (\n        <p className=\"alerta-error\">Todos los campos son obligatorios</p>\n      )}\n\n      <form action=\"\" onSubmit={handleSubmit}>\n        <label htmlFor=\"mascota\">Nombre Mascota</label>\n        <input\n          type=\"text\"\n          id=\"mascota\"\n          name=\"mascota\"\n          className=\"u-full-width\"\n          placeholder=\"Nombre Mascota\"\n          onChange={handleInputChange}\n          value={mascota}\n        />\n\n        <label htmlFor=\"propietario\">Nombre Dueño</label>\n        <input\n          type=\"text\"\n          id=\"propietario\"\n          name=\"propietario\"\n          className=\"u-full-width\"\n          placeholder=\"Nombre Propietario\"\n          onChange={handleInputChange}\n          value={propietario}\n        />\n\n        <label htmlFor=\"fecha\">Fecha</label>\n        <input\n          type=\"date\"\n          id=\"fecha\"\n          name=\"fecha\"\n          className=\"u-full-width\"\n          onChange={handleInputChange}\n          value={fecha}\n        />\n\n        <label htmlFor=\"hora\">Hora</label>\n        <input\n          type=\"time\"\n          id=\"hora\"\n          name=\"hora\"\n          className=\"u-full-width\"\n          onChange={handleInputChange}\n          value={hora}\n        />\n\n        <label htmlFor=\"sintomas\">Síntomas</label>\n        <textarea\n          name=\"sintomas\"\n          id=\"sintomas\"\n          cols=\"30\"\n          rows=\"10\"\n          className=\"u-full-width\"\n          onChange={handleInputChange}\n          value={sintomas}\n        ></textarea>\n\n        <button type=\"submit\" className=\"u-full-width button-primary\">\n          Agendar Cita\n        </button>\n      </form>\n    </>\n  );\n};\n\nFormulario.propTypes = {\n  mostrarCita: PropTypes.func.isRequired,\n};\n","import { Fragment, useEffect, useState } from 'react';\nimport { Cita } from './component/Cita';\nimport { Formulario } from './component/Formulario';\n\nfunction App() {\n  let initialState = JSON.parse(localStorage.getItem('citas'));\n\n  if (!initialState) {\n    initialState = [];\n  }\n  const [citas, setCitas] = useState(initialState);\n\n  useEffect(() => {\n    localStorage.setItem('citas', JSON.stringify(citas));\n  }, [citas]);\n\n  const mostrarCita = (cita) => {\n    setCitas([...citas, cita]);\n  };\n\n  const eliminarCita = (id) => {\n    const nuevasCitas = citas.filter((cita) => id !== cita.id);\n    setCitas(nuevasCitas);\n  };\n\n  const tituloH2 = citas.length > 0 ? 'Administrar Citas' : 'Agrega una Cita';\n\n  return (\n    <Fragment>\n      <h1>Administrador de Pacientes</h1>\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"one-half column\">\n            <Formulario mostrarCita={mostrarCita} />\n          </div>\n          <div className=\"one-half column\">\n            {<h2>{tituloH2}</h2>}\n\n            {citas.map((cita) => (\n              <Cita key={cita.id} cita={cita} eliminarCita={eliminarCita} />\n            ))}\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}